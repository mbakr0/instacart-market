{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6644,"databundleVersionId":44315,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mohamedabobakr0/instacart-market?scriptVersionId=193836040\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport zipfile\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-24T08:19:12.645595Z","iopub.execute_input":"2024-08-24T08:19:12.646032Z","iopub.status.idle":"2024-08-24T08:19:13.124493Z","shell.execute_reply.started":"2024-08-24T08:19:12.645997Z","shell.execute_reply":"2024-08-24T08:19:13.123325Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/instacart-market-basket-analysis/departments.csv.zip\n/kaggle/input/instacart-market-basket-analysis/sample_submission.csv.zip\n/kaggle/input/instacart-market-basket-analysis/order_products__train.csv.zip\n/kaggle/input/instacart-market-basket-analysis/order_products__prior.csv.zip\n/kaggle/input/instacart-market-basket-analysis/orders.csv.zip\n/kaggle/input/instacart-market-basket-analysis/products.csv.zip\n/kaggle/input/instacart-market-basket-analysis/aisles.csv.zip\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"## 1. Data Exploration and Preprocessing\n### a. Load the Data:\n - Load the CSV files into pandas DataFrames.\n#### Dateframs\n\n    - `departments`\n    - `sample_submission`\n    - `order_products__train`\n    - `order_products__prior` \n    - `orders`\n    - `products`\n    - `aisles`\n - Check for missing values and data types.\n\n ### b. Data Cleaning:\n   - Handle missing values.\n   - Convert data types (e.g., datetime conversion).\n   - Merge DataFrames as needed (e.g., joining order_products with products).","metadata":{}},{"cell_type":"code","source":"path = \"/kaggle/input/instacart-market-basket-analysis/\"\nfiles = [\n    \"departments.csv.zip\",\n    \"order_products__train.csv.zip\",\n    \"order_products__prior.csv.zip\",\n    \"orders.csv.zip\",\n    \"products.csv.zip\",\n    \"aisles.csv.zip\"\n]\nfor file in files:\n    with zipfile.ZipFile(path+file,\"r\") as z:\n        z.extractall(\".\")\n\ndef read_file(file):\n    return pd.read_csv(file)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:13.126694Z","iopub.execute_input":"2024-08-24T08:19:13.127233Z","iopub.status.idle":"2024-08-24T08:19:20.184189Z","shell.execute_reply.started":"2024-08-24T08:19:13.127198Z","shell.execute_reply":"2024-08-24T08:19:20.182611Z"},"trusted":true},"outputs":[],"execution_count":14},{"cell_type":"code","source":"departments,order_products__train,order_products__prior,orders,products,aisles = \\\n[read_file(file.split(\".zip\")[0]) for file in files]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:20.185864Z","iopub.execute_input":"2024-08-24T08:19:20.186346Z","iopub.status.idle":"2024-08-24T08:19:37.363599Z","shell.execute_reply.started":"2024-08-24T08:19:20.186304Z","shell.execute_reply":"2024-08-24T08:19:37.362306Z"},"trusted":true},"outputs":[],"execution_count":15},{"cell_type":"code","source":"order_products = pd.concat([order_products__train,order_products__prior],ignore_index=True)\norders.drop(\"eval_set\",axis=1,inplace= True)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:37.367216Z","iopub.execute_input":"2024-08-24T08:19:37.367714Z","iopub.status.idle":"2024-08-24T08:19:37.933083Z","shell.execute_reply.started":"2024-08-24T08:19:37.367671Z","shell.execute_reply":"2024-08-24T08:19:37.931721Z"},"trusted":true},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"## New table\n\n\n- `orders` `drop()` eval_set \n- `order_products` `concat()` order_products__train, order_products__prior\n- `departments`\n- `products`\n- `aisles`","metadata":{}},{"cell_type":"code","source":"def check_not_null(dataframe):\n    return dataframe.notnull().all(axis=1)\n\ndef check_data_types(dataframe):\n    dataframe.info(show_counts=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:37.935037Z","iopub.execute_input":"2024-08-24T08:19:37.935446Z","iopub.status.idle":"2024-08-24T08:19:37.942178Z","shell.execute_reply.started":"2024-08-24T08:19:37.935413Z","shell.execute_reply":"2024-08-24T08:19:37.940777Z"},"trusted":true},"outputs":[],"execution_count":17},{"cell_type":"code","source":"all_dataframe = {\"orders\":orders,\n                 \"order_products\":order_products,\n                 \"departments\":departments,\n                 \"products\":products,\n                 \"aisles\":aisles}","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:37.943952Z","iopub.execute_input":"2024-08-24T08:19:37.944615Z","iopub.status.idle":"2024-08-24T08:19:37.9603Z","shell.execute_reply.started":"2024-08-24T08:19:37.94457Z","shell.execute_reply":"2024-08-24T08:19:37.958723Z"},"trusted":true},"outputs":[],"execution_count":18},{"cell_type":"code","source":"for key,df in all_dataframe.items():\n    print(f\"{key.capitalize()}\\n{check_not_null(df).value_counts()}\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:37.962511Z","iopub.execute_input":"2024-08-24T08:19:37.962966Z","iopub.status.idle":"2024-08-24T08:19:38.392985Z","shell.execute_reply.started":"2024-08-24T08:19:37.962932Z","shell.execute_reply":"2024-08-24T08:19:38.391119Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Orders\nTrue     3214874\nFalse     206209\nName: count, dtype: int64\n\nOrder_products\nTrue    33819106\nName: count, dtype: int64\n\nDepartments\nTrue    21\nName: count, dtype: int64\n\nProducts\nTrue    49688\nName: count, dtype: int64\n\nAisles\nTrue    134\nName: count, dtype: int64\n\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"for key,df in all_dataframe.items():\n    print(f\"{key.capitalize()}\")\n    check_data_types(df)\n    print(\"\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.394887Z","iopub.execute_input":"2024-08-24T08:19:38.3954Z","iopub.status.idle":"2024-08-24T08:19:38.64045Z","shell.execute_reply.started":"2024-08-24T08:19:38.395354Z","shell.execute_reply":"2024-08-24T08:19:38.638614Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Orders\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3421083 entries, 0 to 3421082\nData columns (total 6 columns):\n #   Column                  Non-Null Count    Dtype  \n---  ------                  --------------    -----  \n 0   order_id                3421083 non-null  int64  \n 1   user_id                 3421083 non-null  int64  \n 2   order_number            3421083 non-null  int64  \n 3   order_dow               3421083 non-null  int64  \n 4   order_hour_of_day       3421083 non-null  int64  \n 5   days_since_prior_order  3214874 non-null  float64\ndtypes: float64(1), int64(5)\nmemory usage: 156.6 MB\n\n\nOrder_products\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 33819106 entries, 0 to 33819105\nData columns (total 4 columns):\n #   Column             Non-Null Count     Dtype\n---  ------             --------------     -----\n 0   order_id           33819106 non-null  int64\n 1   product_id         33819106 non-null  int64\n 2   add_to_cart_order  33819106 non-null  int64\n 3   reordered          33819106 non-null  int64\ndtypes: int64(4)\nmemory usage: 1.0 GB\n\n\nDepartments\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 21 entries, 0 to 20\nData columns (total 2 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   department_id  21 non-null     int64 \n 1   department     21 non-null     object\ndtypes: int64(1), object(1)\nmemory usage: 464.0+ bytes\n\n\nProducts\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 49688 entries, 0 to 49687\nData columns (total 4 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   product_id     49688 non-null  int64 \n 1   product_name   49688 non-null  object\n 2   aisle_id       49688 non-null  int64 \n 3   department_id  49688 non-null  int64 \ndtypes: int64(3), object(1)\nmemory usage: 1.5+ MB\n\n\nAisles\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 134 entries, 0 to 133\nData columns (total 2 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   aisle_id  134 non-null    int64 \n 1   aisle     134 non-null    object\ndtypes: int64(1), object(1)\nmemory usage: 2.2+ KB\n\n\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"orders.loc[orders[\"days_since_prior_order\"].isna(),[\"days_since_prior_order\"]] = 0","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.642313Z","iopub.execute_input":"2024-08-24T08:19:38.642909Z","iopub.status.idle":"2024-08-24T08:19:38.664612Z","shell.execute_reply.started":"2024-08-24T08:19:38.642864Z","shell.execute_reply":"2024-08-24T08:19:38.663414Z"},"trusted":true},"outputs":[],"execution_count":21},{"cell_type":"code","source":"orders[\"days_since_prior_order\"] = orders[\"days_since_prior_order\"].astype(int)\norders.info(show_counts=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.669492Z","iopub.execute_input":"2024-08-24T08:19:38.669917Z","iopub.status.idle":"2024-08-24T08:19:38.718235Z","shell.execute_reply.started":"2024-08-24T08:19:38.669881Z","shell.execute_reply":"2024-08-24T08:19:38.717062Z"},"trusted":true},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3421083 entries, 0 to 3421082\nData columns (total 6 columns):\n #   Column                  Non-Null Count    Dtype\n---  ------                  --------------    -----\n 0   order_id                3421083 non-null  int64\n 1   user_id                 3421083 non-null  int64\n 2   order_number            3421083 non-null  int64\n 3   order_dow               3421083 non-null  int64\n 4   order_hour_of_day       3421083 non-null  int64\n 5   days_since_prior_order  3421083 non-null  int64\ndtypes: int64(6)\nmemory usage: 156.6 MB\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"products = products.merge(aisles).merge(departments)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.719504Z","iopub.execute_input":"2024-08-24T08:19:38.719884Z","iopub.status.idle":"2024-08-24T08:19:38.752018Z","shell.execute_reply.started":"2024-08-24T08:19:38.719854Z","shell.execute_reply":"2024-08-24T08:19:38.750582Z"},"trusted":true},"outputs":[],"execution_count":23},{"cell_type":"code","source":"products = products.iloc[:,[0,2,3,1,4,5]]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.753506Z","iopub.execute_input":"2024-08-24T08:19:38.754008Z","iopub.status.idle":"2024-08-24T08:19:38.765664Z","shell.execute_reply.started":"2024-08-24T08:19:38.753965Z","shell.execute_reply":"2024-08-24T08:19:38.764085Z"},"trusted":true},"outputs":[],"execution_count":24},{"cell_type":"code","source":"display(orders.head(),products.head(),order_products.head())","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.76749Z","iopub.execute_input":"2024-08-24T08:19:38.767937Z","iopub.status.idle":"2024-08-24T08:19:38.803016Z","shell.execute_reply.started":"2024-08-24T08:19:38.767902Z","shell.execute_reply":"2024-08-24T08:19:38.801669Z"},"trusted":true},"outputs":[{"output_type":"display_data","data":{"text/plain":"   order_id  user_id  order_number  order_dow  order_hour_of_day  \\\n0   2539329        1             1          2                  8   \n1   2398795        1             2          3                  7   \n2    473747        1             3          3                 12   \n3   2254736        1             4          4                  7   \n4    431534        1             5          4                 15   \n\n   days_since_prior_order  \n0                       0  \n1                      15  \n2                      21  \n3                      29  \n4                      28  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>user_id</th>\n      <th>order_number</th>\n      <th>order_dow</th>\n      <th>order_hour_of_day</th>\n      <th>days_since_prior_order</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2539329</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>8</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2398795</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>7</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>473747</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>12</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2254736</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>7</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>431534</td>\n      <td>1</td>\n      <td>5</td>\n      <td>4</td>\n      <td>15</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"   product_id  aisle_id  department_id  \\\n0           1        61             19   \n1           2       104             13   \n2           3        94              7   \n3           4        38              1   \n4           5         5             13   \n\n                                        product_name  \\\n0                         Chocolate Sandwich Cookies   \n1                                   All-Seasons Salt   \n2               Robust Golden Unsweetened Oolong Tea   \n3  Smart Ones Classic Favorites Mini Rigatoni Wit...   \n4                          Green Chile Anytime Sauce   \n\n                        aisle department  \n0               cookies cakes     snacks  \n1           spices seasonings     pantry  \n2                         tea  beverages  \n3                frozen meals     frozen  \n4  marinades meat preparation     pantry  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_id</th>\n      <th>aisle_id</th>\n      <th>department_id</th>\n      <th>product_name</th>\n      <th>aisle</th>\n      <th>department</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>61</td>\n      <td>19</td>\n      <td>Chocolate Sandwich Cookies</td>\n      <td>cookies cakes</td>\n      <td>snacks</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>104</td>\n      <td>13</td>\n      <td>All-Seasons Salt</td>\n      <td>spices seasonings</td>\n      <td>pantry</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>94</td>\n      <td>7</td>\n      <td>Robust Golden Unsweetened Oolong Tea</td>\n      <td>tea</td>\n      <td>beverages</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>38</td>\n      <td>1</td>\n      <td>Smart Ones Classic Favorites Mini Rigatoni Wit...</td>\n      <td>frozen meals</td>\n      <td>frozen</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>5</td>\n      <td>13</td>\n      <td>Green Chile Anytime Sauce</td>\n      <td>marinades meat preparation</td>\n      <td>pantry</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"   order_id  product_id  add_to_cart_order  reordered\n0         1       49302                  1          1\n1         1       11109                  2          1\n2         1       10246                  3          0\n3         1       49683                  4          0\n4         1       43633                  5          1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>product_id</th>\n      <th>add_to_cart_order</th>\n      <th>reordered</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>49302</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>11109</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>10246</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>49683</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>43633</td>\n      <td>5</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"## New table\n- `orders`\n- `order_products` \n- `products` `merge()` with `aisles` and `departments`","metadata":{}},{"cell_type":"markdown","source":"### c. Basic Descriptive Statistics:\n   - Calculate summary statistics for numerical features.\n   - Examine the distribution of categorical features.","metadata":{}},{"cell_type":"code","source":"summary_statistics = pd.concat([order_products.iloc[:,[2,3]].describe(percentiles=[0.9,0.99]) , orders.iloc[:,2:6].describe(percentiles=[0.9,0.99])],axis=1).astype(int)\nsummary_statistics","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:38.804728Z","iopub.execute_input":"2024-08-24T08:19:38.805223Z","iopub.status.idle":"2024-08-24T08:19:41.753048Z","shell.execute_reply.started":"2024-08-24T08:19:38.80517Z","shell.execute_reply":"2024-08-24T08:19:41.751708Z"},"trusted":true},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"       add_to_cart_order  reordered  order_number  order_dow  \\\ncount           33819106   33819106       3421083    3421083   \nmean                   8          0            17          2   \nstd                    7          0            17          2   \nmin                    1          0             1          0   \n50%                    6          1            11          3   \n90%                   18          1            42          6   \n99%                   33          1            83          6   \nmax                  145          1           100          6   \n\n       order_hour_of_day  days_since_prior_order  \ncount            3421083                 3421083  \nmean                  13                      10  \nstd                    4                       9  \nmin                    0                       0  \n50%                   13                       7  \n90%                   19                      30  \n99%                   23                      30  \nmax                   23                      30  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>add_to_cart_order</th>\n      <th>reordered</th>\n      <th>order_number</th>\n      <th>order_dow</th>\n      <th>order_hour_of_day</th>\n      <th>days_since_prior_order</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>33819106</td>\n      <td>33819106</td>\n      <td>3421083</td>\n      <td>3421083</td>\n      <td>3421083</td>\n      <td>3421083</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>8</td>\n      <td>0</td>\n      <td>17</td>\n      <td>2</td>\n      <td>13</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7</td>\n      <td>0</td>\n      <td>17</td>\n      <td>2</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6</td>\n      <td>1</td>\n      <td>11</td>\n      <td>3</td>\n      <td>13</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>90%</th>\n      <td>18</td>\n      <td>1</td>\n      <td>42</td>\n      <td>6</td>\n      <td>19</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>99%</th>\n      <td>33</td>\n      <td>1</td>\n      <td>83</td>\n      <td>6</td>\n      <td>23</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>145</td>\n      <td>1</td>\n      <td>100</td>\n      <td>6</td>\n      <td>23</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"categories = products[[\"department\",\"aisle\",\"product_name\"]].sort_values([\"department\",\"aisle\",\"product_name\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:41.75492Z","iopub.execute_input":"2024-08-24T08:19:41.755379Z","iopub.status.idle":"2024-08-24T08:19:41.922216Z","shell.execute_reply.started":"2024-08-24T08:19:41.755337Z","shell.execute_reply":"2024-08-24T08:19:41.920867Z"},"trusted":true},"outputs":[],"execution_count":27},{"cell_type":"code","source":"categories.groupby([\"department\",\"aisle\"]).count().join(\n    categories.groupby([\"department\"]).nunique().rename(columns={\n    \"aisle\": \"aisle_in_dep\",\n    \"product_name\": \"products_in_dep\"\n    })\n).rename(columns={\n    \"product_name\": \"products_in_aisle\",\n}).reset_index().set_index([\"department\",\"aisle_in_dep\", \"products_in_dep\",\"aisle\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:41.924271Z","iopub.execute_input":"2024-08-24T08:19:41.924978Z","iopub.status.idle":"2024-08-24T08:19:42.019161Z","shell.execute_reply.started":"2024-08-24T08:19:41.924916Z","shell.execute_reply":"2024-08-24T08:19:42.017864Z"},"trusted":true},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"                                                                    products_in_aisle\ndepartment aisle_in_dep products_in_dep aisle                                        \nalcohol    5            1054            beers coolers                             385\n                                        red wines                                 232\n                                        specialty wines champagnes                 95\n                                        spirits                                   195\n                                        white wines                               147\n...                                                                               ...\nsnacks     11           6264            ice cream toppings                         85\n                                        mint gum                                  168\n                                        nuts seeds dried fruit                    582\n                                        popcorn jerky                             316\n                                        trail mix snack mix                        69\n\n[134 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>products_in_aisle</th>\n    </tr>\n    <tr>\n      <th>department</th>\n      <th>aisle_in_dep</th>\n      <th>products_in_dep</th>\n      <th>aisle</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">alcohol</th>\n      <th rowspan=\"5\" valign=\"top\">5</th>\n      <th rowspan=\"5\" valign=\"top\">1054</th>\n      <th>beers coolers</th>\n      <td>385</td>\n    </tr>\n    <tr>\n      <th>red wines</th>\n      <td>232</td>\n    </tr>\n    <tr>\n      <th>specialty wines champagnes</th>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>spirits</th>\n      <td>195</td>\n    </tr>\n    <tr>\n      <th>white wines</th>\n      <td>147</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">snacks</th>\n      <th rowspan=\"5\" valign=\"top\">11</th>\n      <th rowspan=\"5\" valign=\"top\">6264</th>\n      <th>ice cream toppings</th>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>mint gum</th>\n      <td>168</td>\n    </tr>\n    <tr>\n      <th>nuts seeds dried fruit</th>\n      <td>582</td>\n    </tr>\n    <tr>\n      <th>popcorn jerky</th>\n      <td>316</td>\n    </tr>\n    <tr>\n      <th>trail mix snack mix</th>\n      <td>69</td>\n    </tr>\n  </tbody>\n</table>\n<p>134 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"pd.set_option('display.max_row', False)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.020704Z","iopub.execute_input":"2024-08-24T08:19:42.021129Z","iopub.status.idle":"2024-08-24T08:19:42.026491Z","shell.execute_reply.started":"2024-08-24T08:19:42.021096Z","shell.execute_reply":"2024-08-24T08:19:42.02538Z"},"trusted":true},"outputs":[],"execution_count":29},{"cell_type":"markdown","source":"## 2. Exploratory Data Analysis (EDA)\n### a. Customer Behavior:\n - Average number of orders per user.\n - Average time between orders for each user.\n - Number of orders placed by each customer.\n - Customer segments based on purchase frequency.","metadata":{}},{"cell_type":"code","source":"orders[\"order_number\"].count() / orders[\"user_id\"].nunique()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.028065Z","iopub.execute_input":"2024-08-24T08:19:42.028507Z","iopub.status.idle":"2024-08-24T08:19:42.076371Z","shell.execute_reply.started":"2024-08-24T08:19:42.028466Z","shell.execute_reply":"2024-08-24T08:19:42.074962Z"},"trusted":true},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"16.590367054784224"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"orders.groupby(\"user_id\").mean().astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.077792Z","iopub.execute_input":"2024-08-24T08:19:42.078145Z","iopub.status.idle":"2024-08-24T08:19:42.362556Z","shell.execute_reply.started":"2024-08-24T08:19:42.078115Z","shell.execute_reply":"2024-08-24T08:19:42.361182Z"},"trusted":true},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"         order_id  order_number  order_dow  order_hour_of_day  \\\nuser_id                                                         \n1         1923450             6          2                 10   \n2         1768104             8          2                 10   \n3         1934104             7          1                 16   \n4         1507834             3          4                 12   \n5         1849578             3          1                 15   \n6         1227931             2          3                 17   \n7         1782058            11          1                 13   \n8         1757721             2          3                  5   \n9         1491936             2          3                 13   \n...           ...           ...        ...                ...   \n206201    1645158            17          3                 14   \n206202    1782584            12          2                 13   \n206203    1595740             3          2                 16   \n206204    1151977             3          2                 12   \n206205    1439588             2          3                 14   \n206206    1813826            34          2                 16   \n206207    1786525             9          2                 12   \n206208    2004526            25          2                 14   \n206209    1857467             7          3                 13   \n\n         days_since_prior_order  \nuser_id                          \n1                            17  \n2                            15  \n3                            11  \n4                            14  \n5                             9  \n6                            10  \n7                             9  \n8                            17  \n9                            16  \n...                         ...  \n206201                       10  \n206202                       11  \n206203                       24  \n206204                       11  \n206205                       12  \n206206                        3  \n206207                       13  \n206208                        7  \n206209                       17  \n\n[206209 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>order_number</th>\n      <th>order_dow</th>\n      <th>order_hour_of_day</th>\n      <th>days_since_prior_order</th>\n    </tr>\n    <tr>\n      <th>user_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1923450</td>\n      <td>6</td>\n      <td>2</td>\n      <td>10</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1768104</td>\n      <td>8</td>\n      <td>2</td>\n      <td>10</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1934104</td>\n      <td>7</td>\n      <td>1</td>\n      <td>16</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1507834</td>\n      <td>3</td>\n      <td>4</td>\n      <td>12</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1849578</td>\n      <td>3</td>\n      <td>1</td>\n      <td>15</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1227931</td>\n      <td>2</td>\n      <td>3</td>\n      <td>17</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1782058</td>\n      <td>11</td>\n      <td>1</td>\n      <td>13</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1757721</td>\n      <td>2</td>\n      <td>3</td>\n      <td>5</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1491936</td>\n      <td>2</td>\n      <td>3</td>\n      <td>13</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>206201</th>\n      <td>1645158</td>\n      <td>17</td>\n      <td>3</td>\n      <td>14</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>206202</th>\n      <td>1782584</td>\n      <td>12</td>\n      <td>2</td>\n      <td>13</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>206203</th>\n      <td>1595740</td>\n      <td>3</td>\n      <td>2</td>\n      <td>16</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>206204</th>\n      <td>1151977</td>\n      <td>3</td>\n      <td>2</td>\n      <td>12</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>206205</th>\n      <td>1439588</td>\n      <td>2</td>\n      <td>3</td>\n      <td>14</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>206206</th>\n      <td>1813826</td>\n      <td>34</td>\n      <td>2</td>\n      <td>16</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>206207</th>\n      <td>1786525</td>\n      <td>9</td>\n      <td>2</td>\n      <td>12</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>206208</th>\n      <td>2004526</td>\n      <td>25</td>\n      <td>2</td>\n      <td>14</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>206209</th>\n      <td>1857467</td>\n      <td>7</td>\n      <td>3</td>\n      <td>13</td>\n      <td>17</td>\n    </tr>\n  </tbody>\n</table>\n<p>206209 rows × 5 columns</p>\n</div>"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"orders.groupby(\"user_id\")[\"order_number\"].count()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.363978Z","iopub.execute_input":"2024-08-24T08:19:42.364321Z","iopub.status.idle":"2024-08-24T08:19:42.45413Z","shell.execute_reply.started":"2024-08-24T08:19:42.364291Z","shell.execute_reply":"2024-08-24T08:19:42.452874Z"},"trusted":true},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"user_id\n1         11\n2         15\n3         13\n4          6\n5          5\n6          4\n7         21\n8          4\n9          4\n10         6\n11         8\n12         6\n          ..\n206198     8\n206199    20\n206200    24\n206201    33\n206202    23\n206203     6\n206204     5\n206205     4\n206206    68\n206207    17\n206208    50\n206209    14\nName: order_number, Length: 206209, dtype: int64"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"freq = orders.groupby(\"user_id\")[\"days_since_prior_order\"].mean().astype(int)\nbins = np.arange(freq.min()-1 , freq.max() + 2,4)\nsegments = pd.cut(freq,bins).reset_index().rename(columns={\"days_since_prior_order\":\"segments\"}).sort_values(\"segments\").set_index(\"segments\")\nsegments","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.456094Z","iopub.execute_input":"2024-08-24T08:19:42.45654Z","iopub.status.idle":"2024-08-24T08:19:42.62989Z","shell.execute_reply.started":"2024-08-24T08:19:42.456501Z","shell.execute_reply":"2024-08-24T08:19:42.628634Z"},"trusted":true},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"          user_id\nsegments         \n(-1, 3]    146737\n(-1, 3]     97805\n(-1, 3]    132783\n(-1, 3]    119610\n(-1, 3]     86559\n(-1, 3]    204022\n(-1, 3]     21969\n(-1, 3]    183016\n(-1, 3]    163035\n...           ...\n(23, 27]    14881\n(23, 27]   157692\n(23, 27]   190255\n(23, 27]   157709\n(23, 27]   190256\n(23, 27]   119684\n(23, 27]    73205\n(23, 27]   119917\n(23, 27]    99231\n\n[206209 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n    </tr>\n    <tr>\n      <th>segments</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>146737</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>97805</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>132783</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>119610</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>86559</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>204022</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>21969</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>183016</td>\n    </tr>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>163035</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>14881</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>157692</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>190255</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>157709</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>190256</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>119684</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>73205</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>119917</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>99231</td>\n    </tr>\n  </tbody>\n</table>\n<p>206209 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"segments.groupby(\"segments\",observed=True).count()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.631667Z","iopub.execute_input":"2024-08-24T08:19:42.632687Z","iopub.status.idle":"2024-08-24T08:19:42.653429Z","shell.execute_reply.started":"2024-08-24T08:19:42.632644Z","shell.execute_reply":"2024-08-24T08:19:42.65216Z"},"trusted":true},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"          user_id\nsegments         \n(-1, 3]      5645\n(3, 7]      34086\n(7, 11]     46637\n(11, 15]    48216\n(15, 19]    42179\n(19, 23]    25162\n(23, 27]     4284","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n    </tr>\n    <tr>\n      <th>segments</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>(-1, 3]</th>\n      <td>5645</td>\n    </tr>\n    <tr>\n      <th>(3, 7]</th>\n      <td>34086</td>\n    </tr>\n    <tr>\n      <th>(7, 11]</th>\n      <td>46637</td>\n    </tr>\n    <tr>\n      <th>(11, 15]</th>\n      <td>48216</td>\n    </tr>\n    <tr>\n      <th>(15, 19]</th>\n      <td>42179</td>\n    </tr>\n    <tr>\n      <th>(19, 23]</th>\n      <td>25162</td>\n    </tr>\n    <tr>\n      <th>(23, 27]</th>\n      <td>4284</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":34},{"cell_type":"markdown","source":"### b. Product Analysis:\n - Identify most popular products by frequency.\n - Determine average order size (number of items per order).","metadata":{}},{"cell_type":"code","source":"product_frequency = order_products.product_id.value_counts().reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:42.655027Z","iopub.execute_input":"2024-08-24T08:19:42.655467Z","iopub.status.idle":"2024-08-24T08:19:44.583366Z","shell.execute_reply.started":"2024-08-24T08:19:42.655428Z","shell.execute_reply":"2024-08-24T08:19:44.582074Z"},"trusted":true},"outputs":[],"execution_count":35},{"cell_type":"code","source":"product_frequency.merge(products).iloc[:,[4,1]]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:44.60683Z","iopub.execute_input":"2024-08-24T08:19:44.607248Z","iopub.status.idle":"2024-08-24T08:19:44.658126Z","shell.execute_reply.started":"2024-08-24T08:19:44.607215Z","shell.execute_reply":"2024-08-24T08:19:44.656877Z"},"trusted":true},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"                           product_name   count\n0                                Banana  491291\n1                Bag of Organic Bananas  394930\n2                  Organic Strawberries  275577\n3                  Organic Baby Spinach  251705\n4                  Organic Hass Avocado  220877\n5                       Organic Avocado  184224\n6                           Large Lemon  160792\n7                          Strawberries  149445\n8                                 Limes  146660\n...                                 ...     ...\n49676  Wasabi Cheddar Spreadable Cheese       1\n49677               Indian Wells Merlot       1\n49678   Tropic Thunder  Coconut & Cream       1\n49679           Pure Peppermint Extract       1\n49680   Coconut Bliss Pineapple Coconut       1\n49681                 Salsa, Black Bean       1\n49682              Sweetart Jelly Beans       1\n49683        The Ultimate Caramel Suace       1\n49684       Flatbread Pizza All Natural       1\n\n[49685 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_name</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Banana</td>\n      <td>491291</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bag of Organic Bananas</td>\n      <td>394930</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Organic Strawberries</td>\n      <td>275577</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Organic Baby Spinach</td>\n      <td>251705</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Organic Hass Avocado</td>\n      <td>220877</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Organic Avocado</td>\n      <td>184224</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Large Lemon</td>\n      <td>160792</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Strawberries</td>\n      <td>149445</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Limes</td>\n      <td>146660</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49676</th>\n      <td>Wasabi Cheddar Spreadable Cheese</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49677</th>\n      <td>Indian Wells Merlot</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49678</th>\n      <td>Tropic Thunder  Coconut &amp; Cream</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49679</th>\n      <td>Pure Peppermint Extract</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49680</th>\n      <td>Coconut Bliss Pineapple Coconut</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49681</th>\n      <td>Salsa, Black Bean</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49682</th>\n      <td>Sweetart Jelly Beans</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49683</th>\n      <td>The Ultimate Caramel Suace</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49684</th>\n      <td>Flatbread Pizza All Natural</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>49685 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"int(order_products.shape[0] / order_products.order_id.nunique())","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:44.659407Z","iopub.execute_input":"2024-08-24T08:19:44.659788Z","iopub.status.idle":"2024-08-24T08:19:45.264968Z","shell.execute_reply.started":"2024-08-24T08:19:44.659733Z","shell.execute_reply":"2024-08-24T08:19:45.26384Z"},"trusted":true},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"10"},"metadata":{}}],"execution_count":38},{"cell_type":"markdown","source":"### c. Temporal Patterns:\n\n - Analyze orders by day of the week and hour of the day.\n - Explore seasonal trends or patterns in purchasing behavior.\n - Months with higher order volumes.\n","metadata":{}},{"cell_type":"code","source":"days=[\"Sunday\",\"Monday\",\" Tuesday\", \"Wednesday\" ,\"Thursday\", \"Friday\", \"Saturday\"]\n\norders[\"weekday_name\"] = [days[x] for x in orders.order_dow]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:45.266434Z","iopub.execute_input":"2024-08-24T08:19:45.26693Z","iopub.status.idle":"2024-08-24T08:19:46.163202Z","shell.execute_reply.started":"2024-08-24T08:19:45.266886Z","shell.execute_reply":"2024-08-24T08:19:46.161336Z"},"trusted":true},"outputs":[],"execution_count":39},{"cell_type":"code","source":"def generate_date(start_date:pd.Timestamp,order_dow,order_hour_of_day):\n    date_list = [start_date.replace(hour=order_hour_of_day.iloc[0])]\n    last_date = start_date\n   \n    for index in range(1,len(order_dow)):\n        \n        first_day = order_dow.iloc[index - 1]\n        second_day = order_dow.iloc[index]\n        timedelta = 0\n        \n        if second_day < first_day:\n            timedelta = second_day + 7 - first_day\n        else:\n            timedelta = second_day - first_day\n        timedelta = timedelta % 7\n        last_date = last_date + pd.Timedelta(days = timedelta)\n        date_list.append(last_date.replace(hour=order_hour_of_day.iloc[index]))\n    return date_list","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:46.173969Z","iopub.execute_input":"2024-08-24T08:19:46.175377Z","iopub.status.idle":"2024-08-24T08:19:46.18559Z","shell.execute_reply.started":"2024-08-24T08:19:46.175322Z","shell.execute_reply":"2024-08-24T08:19:46.184278Z"},"trusted":true},"outputs":[],"execution_count":40},{"cell_type":"code","source":"sorted_orders = orders.sort_values(\"order_dow\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:46.187082Z","iopub.execute_input":"2024-08-24T08:19:46.187474Z","iopub.status.idle":"2024-08-24T08:19:46.810829Z","shell.execute_reply.started":"2024-08-24T08:19:46.18743Z","shell.execute_reply":"2024-08-24T08:19:46.809432Z"},"trusted":true},"outputs":[],"execution_count":41},{"cell_type":"code","source":"pd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_row\",10)\n\nsort = orders.sort_values(\"order_id\")\nsort = sort.iloc[:100,:]\nsort[\"date\"] = generate_date(pd.Timestamp(year=2024, month=1, day=4, hour=5),sort.order_dow[:100],sort.order_hour_of_day[:100])\norders.iloc[0:20]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:46.812379Z","iopub.execute_input":"2024-08-24T08:19:46.812796Z","iopub.status.idle":"2024-08-24T08:19:48.303639Z","shell.execute_reply.started":"2024-08-24T08:19:46.812737Z","shell.execute_reply":"2024-08-24T08:19:48.302569Z"},"trusted":true},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"    order_id  user_id  order_number  order_dow  order_hour_of_day  \\\n0    2539329        1             1          2                  8   \n1    2398795        1             2          3                  7   \n2     473747        1             3          3                 12   \n3    2254736        1             4          4                  7   \n4     431534        1             5          4                 15   \n..       ...      ...           ...        ...                ...   \n15   1673511        2             5          3                 11   \n16   1199898        2             6          2                  9   \n17   3194192        2             7          2                 12   \n18    788338        2             8          1                 15   \n19   1718559        2             9          2                  9   \n\n    days_since_prior_order weekday_name  \n0                        0      Tuesday  \n1                       15    Wednesday  \n2                       21    Wednesday  \n3                       29     Thursday  \n4                       28     Thursday  \n..                     ...          ...  \n15                       8    Wednesday  \n16                      13      Tuesday  \n17                      14      Tuesday  \n18                      27       Monday  \n19                       8      Tuesday  \n\n[20 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>user_id</th>\n      <th>order_number</th>\n      <th>order_dow</th>\n      <th>order_hour_of_day</th>\n      <th>days_since_prior_order</th>\n      <th>weekday_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2539329</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>8</td>\n      <td>0</td>\n      <td>Tuesday</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2398795</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>7</td>\n      <td>15</td>\n      <td>Wednesday</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>473747</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>12</td>\n      <td>21</td>\n      <td>Wednesday</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2254736</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>7</td>\n      <td>29</td>\n      <td>Thursday</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>431534</td>\n      <td>1</td>\n      <td>5</td>\n      <td>4</td>\n      <td>15</td>\n      <td>28</td>\n      <td>Thursday</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1673511</td>\n      <td>2</td>\n      <td>5</td>\n      <td>3</td>\n      <td>11</td>\n      <td>8</td>\n      <td>Wednesday</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1199898</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2</td>\n      <td>9</td>\n      <td>13</td>\n      <td>Tuesday</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>3194192</td>\n      <td>2</td>\n      <td>7</td>\n      <td>2</td>\n      <td>12</td>\n      <td>14</td>\n      <td>Tuesday</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>788338</td>\n      <td>2</td>\n      <td>8</td>\n      <td>1</td>\n      <td>15</td>\n      <td>27</td>\n      <td>Monday</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1718559</td>\n      <td>2</td>\n      <td>9</td>\n      <td>2</td>\n      <td>9</td>\n      <td>8</td>\n      <td>Tuesday</td>\n    </tr>\n  </tbody>\n</table>\n<p>20 rows × 7 columns</p>\n</div>"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"pivot = pd.pivot_table(\n    data = sorted_orders,\n    values=\"order_id\",\n    index=\"weekday_name\",\n    columns=\"order_hour_of_day\",\n    aggfunc=\"count\",\n    margins=True,\n    margins_name='Grand Total',\n    sort=False)\npivot.columns = pivot.columns[0:-1].sort_values().append(pd.Index([pivot.columns[-1]])) \npivot","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:48.305158Z","iopub.execute_input":"2024-08-24T08:19:48.305521Z","iopub.status.idle":"2024-08-24T08:19:49.883631Z","shell.execute_reply.started":"2024-08-24T08:19:48.305488Z","shell.execute_reply":"2024-08-24T08:19:49.882354Z"},"trusted":true},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"                  0       1       2      3       4      5       6       7  \\\nweekday_name                                                                \nSunday        11246   53954   49463  14423   51443   6887   40798   54552   \nMonday         8992   46403   44761  11943   47079   5620   51908   46764   \n Tuesday       8146   37469   37541  10653   35780   5358   36314   37173   \nWednesday      8242   35990   35273  10278   33455   5181   32312   34773   \nThursday       8812   34222   34093  10796   32249   5645   31409   33625   \nFriday         7498   37508   35860   9515   35714   5265   34232   37407   \nSaturday       8532   38093   35562  10501   37121   6087   30839   38748   \nGrand Total   61468  283639  272553  78109  272841  40043  257812  283042   \n\n                   8       9      10      11      12     13      14      15  \\\nweekday_name                                                                  \nSunday         53849   51035   39753   28108   18277  12410   22654   48465   \nMonday         46728   51584   36792   34116   16281  16571   22145   55671   \n Tuesday       36650   38128   32151   24635   15039  13245   20084   39230   \nWednesday      34161   35215   30368   22553   13795  12396   19249   36040   \nThursday       32751   33857   29378   21814   14186  12493   19350   35034   \nFriday         36296   37915   29955   24015   13322  13434   18741   38313   \nSaturday       37564   36994   30398   22960   13392  11319   18346   35665   \nGrand Total   277999  284728  228795  178201  104292  91868  140569  288418   \n\n                  16     17     18    19    20     21    22    23  Grand Total  \nweekday_name                                                                    \nSunday         29572   3329   3936  1409   813   2398  1168   963       600905  \nMonday         28977   5370   3674  1105   809   1830  1607   748       587478  \n Tuesday       26470   4758   3059   943   744   1572  1399   719       467260  \nWednesday      25001   4562   2952   953   719   1495  1355   654       436972  \nThursday       24425   4401   2642   899   730   1512  1330   686       426339  \nFriday         24310   4866   3189  1016   910   1672  1574   841       453368  \nSaturday       24157   3243   3306  1214   802   1919  1136   863       448761  \nGrand Total   182912  30529  22758  7539  5527  12398  9569  5474      3421083  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>11</th>\n      <th>12</th>\n      <th>13</th>\n      <th>14</th>\n      <th>15</th>\n      <th>16</th>\n      <th>17</th>\n      <th>18</th>\n      <th>19</th>\n      <th>20</th>\n      <th>21</th>\n      <th>22</th>\n      <th>23</th>\n      <th>Grand Total</th>\n    </tr>\n    <tr>\n      <th>weekday_name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Sunday</th>\n      <td>11246</td>\n      <td>53954</td>\n      <td>49463</td>\n      <td>14423</td>\n      <td>51443</td>\n      <td>6887</td>\n      <td>40798</td>\n      <td>54552</td>\n      <td>53849</td>\n      <td>51035</td>\n      <td>39753</td>\n      <td>28108</td>\n      <td>18277</td>\n      <td>12410</td>\n      <td>22654</td>\n      <td>48465</td>\n      <td>29572</td>\n      <td>3329</td>\n      <td>3936</td>\n      <td>1409</td>\n      <td>813</td>\n      <td>2398</td>\n      <td>1168</td>\n      <td>963</td>\n      <td>600905</td>\n    </tr>\n    <tr>\n      <th>Monday</th>\n      <td>8992</td>\n      <td>46403</td>\n      <td>44761</td>\n      <td>11943</td>\n      <td>47079</td>\n      <td>5620</td>\n      <td>51908</td>\n      <td>46764</td>\n      <td>46728</td>\n      <td>51584</td>\n      <td>36792</td>\n      <td>34116</td>\n      <td>16281</td>\n      <td>16571</td>\n      <td>22145</td>\n      <td>55671</td>\n      <td>28977</td>\n      <td>5370</td>\n      <td>3674</td>\n      <td>1105</td>\n      <td>809</td>\n      <td>1830</td>\n      <td>1607</td>\n      <td>748</td>\n      <td>587478</td>\n    </tr>\n    <tr>\n      <th>Tuesday</th>\n      <td>8146</td>\n      <td>37469</td>\n      <td>37541</td>\n      <td>10653</td>\n      <td>35780</td>\n      <td>5358</td>\n      <td>36314</td>\n      <td>37173</td>\n      <td>36650</td>\n      <td>38128</td>\n      <td>32151</td>\n      <td>24635</td>\n      <td>15039</td>\n      <td>13245</td>\n      <td>20084</td>\n      <td>39230</td>\n      <td>26470</td>\n      <td>4758</td>\n      <td>3059</td>\n      <td>943</td>\n      <td>744</td>\n      <td>1572</td>\n      <td>1399</td>\n      <td>719</td>\n      <td>467260</td>\n    </tr>\n    <tr>\n      <th>Wednesday</th>\n      <td>8242</td>\n      <td>35990</td>\n      <td>35273</td>\n      <td>10278</td>\n      <td>33455</td>\n      <td>5181</td>\n      <td>32312</td>\n      <td>34773</td>\n      <td>34161</td>\n      <td>35215</td>\n      <td>30368</td>\n      <td>22553</td>\n      <td>13795</td>\n      <td>12396</td>\n      <td>19249</td>\n      <td>36040</td>\n      <td>25001</td>\n      <td>4562</td>\n      <td>2952</td>\n      <td>953</td>\n      <td>719</td>\n      <td>1495</td>\n      <td>1355</td>\n      <td>654</td>\n      <td>436972</td>\n    </tr>\n    <tr>\n      <th>Thursday</th>\n      <td>8812</td>\n      <td>34222</td>\n      <td>34093</td>\n      <td>10796</td>\n      <td>32249</td>\n      <td>5645</td>\n      <td>31409</td>\n      <td>33625</td>\n      <td>32751</td>\n      <td>33857</td>\n      <td>29378</td>\n      <td>21814</td>\n      <td>14186</td>\n      <td>12493</td>\n      <td>19350</td>\n      <td>35034</td>\n      <td>24425</td>\n      <td>4401</td>\n      <td>2642</td>\n      <td>899</td>\n      <td>730</td>\n      <td>1512</td>\n      <td>1330</td>\n      <td>686</td>\n      <td>426339</td>\n    </tr>\n    <tr>\n      <th>Friday</th>\n      <td>7498</td>\n      <td>37508</td>\n      <td>35860</td>\n      <td>9515</td>\n      <td>35714</td>\n      <td>5265</td>\n      <td>34232</td>\n      <td>37407</td>\n      <td>36296</td>\n      <td>37915</td>\n      <td>29955</td>\n      <td>24015</td>\n      <td>13322</td>\n      <td>13434</td>\n      <td>18741</td>\n      <td>38313</td>\n      <td>24310</td>\n      <td>4866</td>\n      <td>3189</td>\n      <td>1016</td>\n      <td>910</td>\n      <td>1672</td>\n      <td>1574</td>\n      <td>841</td>\n      <td>453368</td>\n    </tr>\n    <tr>\n      <th>Saturday</th>\n      <td>8532</td>\n      <td>38093</td>\n      <td>35562</td>\n      <td>10501</td>\n      <td>37121</td>\n      <td>6087</td>\n      <td>30839</td>\n      <td>38748</td>\n      <td>37564</td>\n      <td>36994</td>\n      <td>30398</td>\n      <td>22960</td>\n      <td>13392</td>\n      <td>11319</td>\n      <td>18346</td>\n      <td>35665</td>\n      <td>24157</td>\n      <td>3243</td>\n      <td>3306</td>\n      <td>1214</td>\n      <td>802</td>\n      <td>1919</td>\n      <td>1136</td>\n      <td>863</td>\n      <td>448761</td>\n    </tr>\n    <tr>\n      <th>Grand Total</th>\n      <td>61468</td>\n      <td>283639</td>\n      <td>272553</td>\n      <td>78109</td>\n      <td>272841</td>\n      <td>40043</td>\n      <td>257812</td>\n      <td>283042</td>\n      <td>277999</td>\n      <td>284728</td>\n      <td>228795</td>\n      <td>178201</td>\n      <td>104292</td>\n      <td>91868</td>\n      <td>140569</td>\n      <td>288418</td>\n      <td>182912</td>\n      <td>30529</td>\n      <td>22758</td>\n      <td>7539</td>\n      <td>5527</td>\n      <td>12398</td>\n      <td>9569</td>\n      <td>5474</td>\n      <td>3421083</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"\n### d. Basket Analysis:\n\n - Identify most frequently co-purchased items.\n - Products often bought together on weekends vs. weekdays.","metadata":{}},{"cell_type":"code","source":"freq_table = order_products[[\"order_id\",\"product_id\"]]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:49.885241Z","iopub.execute_input":"2024-08-24T08:19:49.885694Z","iopub.status.idle":"2024-08-24T08:19:50.084202Z","shell.execute_reply.started":"2024-08-24T08:19:49.885652Z","shell.execute_reply":"2024-08-24T08:19:50.082991Z"},"trusted":true},"outputs":[],"execution_count":44},{"cell_type":"code","source":"pd.set_option(\"display.max_row\",10) \n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:50.085704Z","iopub.execute_input":"2024-08-24T08:19:50.086144Z","iopub.status.idle":"2024-08-24T08:19:50.092248Z","shell.execute_reply.started":"2024-08-24T08:19:50.086107Z","shell.execute_reply":"2024-08-24T08:19:50.090732Z"},"trusted":true},"outputs":[],"execution_count":45},{"cell_type":"code","source":"def print_num(num):\n    print(\"{:,}\".format(num))\n\nprint_num(order_products.shape[0])\nprint_num(orders.shape[0])\nprint_num(order_products.groupby(\"order_id\").count().shape[0])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:50.093852Z","iopub.execute_input":"2024-08-24T08:19:50.094253Z","iopub.status.idle":"2024-08-24T08:19:51.906303Z","shell.execute_reply.started":"2024-08-24T08:19:50.09422Z","shell.execute_reply":"2024-08-24T08:19:51.904896Z"},"trusted":true},"outputs":[{"name":"stdout","text":"33,819,106\n3,421,083\n3,346,083\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"import itertools as s\nf = [\"Banana\",\"Bag of Organic Bananas\",\"Organic Strawberries\",\"Organic Baby Spinach\",\"Organic Hass Avocado\"]\nfor i in s.combinations(f, 2):\n    print(i)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:51.907828Z","iopub.execute_input":"2024-08-24T08:19:51.908274Z","iopub.status.idle":"2024-08-24T08:19:51.91817Z","shell.execute_reply.started":"2024-08-24T08:19:51.908233Z","shell.execute_reply":"2024-08-24T08:19:51.916786Z"},"trusted":true},"outputs":[{"name":"stdout","text":"('Banana', 'Bag of Organic Bananas')\n('Banana', 'Organic Strawberries')\n('Banana', 'Organic Baby Spinach')\n('Banana', 'Organic Hass Avocado')\n('Bag of Organic Bananas', 'Organic Strawberries')\n('Bag of Organic Bananas', 'Organic Baby Spinach')\n('Bag of Organic Bananas', 'Organic Hass Avocado')\n('Organic Strawberries', 'Organic Baby Spinach')\n('Organic Strawberries', 'Organic Hass Avocado')\n('Organic Baby Spinach', 'Organic Hass Avocado')\n","output_type":"stream"}],"execution_count":47},{"cell_type":"markdown","source":"## 3. Business Questions and Analysis\n### a. Popular Products:\n\n - Analyze sales distribution of top-selling products.\n - Identify top 5 products commonly added to the cart first.\n - Top 10 product pairs frequently purchased together.\n","metadata":{}},{"cell_type":"code","source":"top_selling = order_products[\"product_id\"]\\\n                .value_counts().to_frame() \\\n                .merge(right=products,on=\"product_id\")\ntop_selling[[\"product_name\",\"count\"]]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:51.919534Z","iopub.execute_input":"2024-08-24T08:19:51.919914Z","iopub.status.idle":"2024-08-24T08:19:53.785748Z","shell.execute_reply.started":"2024-08-24T08:19:51.919881Z","shell.execute_reply":"2024-08-24T08:19:53.784376Z"},"trusted":true},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"                          product_name   count\n0                               Banana  491291\n1               Bag of Organic Bananas  394930\n2                 Organic Strawberries  275577\n3                 Organic Baby Spinach  251705\n4                 Organic Hass Avocado  220877\n...                                ...     ...\n49680  Coconut Bliss Pineapple Coconut       1\n49681                Salsa, Black Bean       1\n49682             Sweetart Jelly Beans       1\n49683       The Ultimate Caramel Suace       1\n49684      Flatbread Pizza All Natural       1\n\n[49685 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_name</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Banana</td>\n      <td>491291</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bag of Organic Bananas</td>\n      <td>394930</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Organic Strawberries</td>\n      <td>275577</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Organic Baby Spinach</td>\n      <td>251705</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Organic Hass Avocado</td>\n      <td>220877</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49680</th>\n      <td>Coconut Bliss Pineapple Coconut</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49681</th>\n      <td>Salsa, Black Bean</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49682</th>\n      <td>Sweetart Jelly Beans</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49683</th>\n      <td>The Ultimate Caramel Suace</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49684</th>\n      <td>Flatbread Pizza All Natural</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>49685 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"product_ids = order_products\\\n            .query(\"add_to_cart_order == 1\")\\\n            .groupby(\"product_id\").count()\\\n            .nlargest(5,\"add_to_cart_order\")\n            \ntop_five = product_ids.merge(right=products,on=\"product_id\").drop([\"reordered\",\"aisle_id\",\"department_id\",\"order_id\"],axis=1)\ntop_five = top_five.iloc[:,[0,2,1,3,4]].rename({\"add_to_cart_order\":\"num_of_item_bought_first\"},axis=1)\ntop_five","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:53.787379Z","iopub.execute_input":"2024-08-24T08:19:53.787861Z","iopub.status.idle":"2024-08-24T08:19:54.557378Z","shell.execute_reply.started":"2024-08-24T08:19:53.787829Z","shell.execute_reply":"2024-08-24T08:19:54.555936Z"},"trusted":true},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"   product_id            product_name  num_of_item_bought_first         aisle  \\\n0       24852                  Banana                    115521  fresh fruits   \n1       13176  Bag of Organic Bananas                     82877  fresh fruits   \n2       27845      Organic Whole Milk                     32071          milk   \n3       21137    Organic Strawberries                     28875  fresh fruits   \n4       47209    Organic Hass Avocado                     24913  fresh fruits   \n\n   department  \n0     produce  \n1     produce  \n2  dairy eggs  \n3     produce  \n4     produce  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_id</th>\n      <th>product_name</th>\n      <th>num_of_item_bought_first</th>\n      <th>aisle</th>\n      <th>department</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>24852</td>\n      <td>Banana</td>\n      <td>115521</td>\n      <td>fresh fruits</td>\n      <td>produce</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>13176</td>\n      <td>Bag of Organic Bananas</td>\n      <td>82877</td>\n      <td>fresh fruits</td>\n      <td>produce</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>27845</td>\n      <td>Organic Whole Milk</td>\n      <td>32071</td>\n      <td>milk</td>\n      <td>dairy eggs</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21137</td>\n      <td>Organic Strawberries</td>\n      <td>28875</td>\n      <td>fresh fruits</td>\n      <td>produce</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>47209</td>\n      <td>Organic Hass Avocado</td>\n      <td>24913</td>\n      <td>fresh fruits</td>\n      <td>produce</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"markdown","source":"### b. Reorder Behavior:\n\n - Analyze the reordered column to understand repeat purchase behavior.\n - Products reordered the most.\n - Reorder behavior based on day of the week and days since prior order.\n - How the number of items in the cart impacts the likelihood of reordering.","metadata":{}},{"cell_type":"code","source":"order_products.query(\"add_to_cart_order == 2 & reordered == 1\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:54.579199Z","iopub.execute_input":"2024-08-24T08:19:54.579594Z","iopub.status.idle":"2024-08-24T08:19:55.054054Z","shell.execute_reply.started":"2024-08-24T08:19:54.579543Z","shell.execute_reply":"2024-08-24T08:19:55.052774Z"},"trusted":true},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"          order_id  product_id  add_to_cart_order  reordered\n1                1       11109                  2          1\n9               36       19660                  2          1\n33              98       19731                  2          1\n82             112       21174                  2          1\n93             170       37766                  2          1\n...            ...         ...                ...        ...\n33819044   3421075       18721                  2          1\n33819052   3421076       25718                  2          1\n33819064   3421078       24852                  2          1\n33819074   3421080        4932                  2          1\n33819090   3421082       12738                  2          1\n\n[2154976 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>product_id</th>\n      <th>add_to_cart_order</th>\n      <th>reordered</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>11109</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>36</td>\n      <td>19660</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>98</td>\n      <td>19731</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>112</td>\n      <td>21174</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>170</td>\n      <td>37766</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>33819044</th>\n      <td>3421075</td>\n      <td>18721</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>33819052</th>\n      <td>3421076</td>\n      <td>25718</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>33819064</th>\n      <td>3421078</td>\n      <td>24852</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>33819074</th>\n      <td>3421080</td>\n      <td>4932</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>33819090</th>\n      <td>3421082</td>\n      <td>12738</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2154976 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"megred = order_products.merge(orders).drop(orders.columns[1:])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:19:55.055849Z","iopub.execute_input":"2024-08-24T08:19:55.056315Z","iopub.status.idle":"2024-08-24T08:20:14.26645Z","shell.execute_reply.started":"2024-08-24T08:19:55.056273Z","shell.execute_reply":"2024-08-24T08:20:14.264544Z"},"trusted":true},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[52], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m megred \u001b[38;5;241m=\u001b[39m \u001b[43morder_products\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmerge\u001b[49m\u001b[43m(\u001b[49m\u001b[43morders\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43morders\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:5581\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5433\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   5434\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   5435\u001b[0m     labels: IndexLabel \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5442\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5443\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5444\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5445\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5446\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5579\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5580\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5581\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5582\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5583\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5584\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5585\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5586\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5587\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5588\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5589\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4788\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4787\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4788\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4790\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4791\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4830\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4829\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4830\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4831\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4833\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4834\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:7070\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   7069\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 7070\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabels[mask]\u001b[38;5;241m.\u001b[39mtolist()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   7071\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   7072\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n","\u001b[0;31mKeyError\u001b[0m: \"['user_id', 'order_number', 'order_dow', 'order_hour_of_day', 'days_since_prior_order', 'weekday_name'] not found in axis\""],"ename":"KeyError","evalue":"\"['user_id', 'order_number', 'order_dow', 'order_hour_of_day', 'days_since_prior_order', 'weekday_name'] not found in axis\"","output_type":"error"}],"execution_count":52},{"cell_type":"code","source":"megred","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:20:14.267806Z","iopub.status.idle":"2024-08-24T08:20:14.268352Z","shell.execute_reply.started":"2024-08-24T08:20:14.268092Z","shell.execute_reply":"2024-08-24T08:20:14.26812Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### c. Customer Segmentation:\n - Segment customers based on the total amount they’ve spent on orders.\n - Identify customers who haven’t placed an order in the last 30 days.\n - Percentage of customers who have churned in the past quarter.","metadata":{}},{"cell_type":"code","source":"products.query(\"aisle.str.contains('chu')\"","metadata":{"execution":{"iopub.status.busy":"2024-08-24T08:20:14.270867Z","iopub.status.idle":"2024-08-24T08:20:14.271504Z","shell.execute_reply.started":"2024-08-24T08:20:14.271194Z","shell.execute_reply":"2024-08-24T08:20:14.27122Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### d. Department and Aisle Analysis:\n\n - Best-selling department and aisle breakdown.\n - What is the “produce” department? Break it down by aisle.\n - Differences in purchasing behavior based on different departments or aisles\n ","metadata":{}},{"cell_type":"code","source":"department_and_aisle = top_selling[[\"department\",\"aisle\",\"count\"]]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T09:10:57.1719Z","iopub.execute_input":"2024-08-24T09:10:57.172424Z","iopub.status.idle":"2024-08-24T09:10:57.182511Z","shell.execute_reply.started":"2024-08-24T09:10:57.172386Z","shell.execute_reply":"2024-08-24T09:10:57.180669Z"},"trusted":true},"outputs":[],"execution_count":58},{"cell_type":"code","source":"dep_count = department_and_aisle[[\"department\",\"count\"]].groupby(\"department\").sum().rename({\"count\":\"dep_count\"},axis=1)\naisle_count = department_and_aisle.groupby([\"department\",\"aisle\"]).sum().rename({\"count\":\"aisle_count\"},axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T09:10:59.536622Z","iopub.execute_input":"2024-08-24T09:10:59.537105Z","iopub.status.idle":"2024-08-24T09:10:59.572787Z","shell.execute_reply.started":"2024-08-24T09:10:59.537069Z","shell.execute_reply":"2024-08-24T09:10:59.571264Z"},"trusted":true},"outputs":[],"execution_count":59},{"cell_type":"code","source":"best_selling = dep_count.join(aisle_count).reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T09:11:02.191401Z","iopub.execute_input":"2024-08-24T09:11:02.191899Z","iopub.status.idle":"2024-08-24T09:11:02.204415Z","shell.execute_reply.started":"2024-08-24T09:11:02.191857Z","shell.execute_reply":"2024-08-24T09:11:02.202789Z"},"trusted":true},"outputs":[],"execution_count":60},{"cell_type":"code","source":"best_selling = best_selling.set_index([\"department\",\"dep_count\",\"aisle\"]).sort_index(level = 1,ascending = False)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T09:11:04.152396Z","iopub.execute_input":"2024-08-24T09:11:04.152826Z","iopub.status.idle":"2024-08-24T09:11:04.168333Z","shell.execute_reply.started":"2024-08-24T09:11:04.152791Z","shell.execute_reply":"2024-08-24T09:11:04.166742Z"},"trusted":true},"outputs":[],"execution_count":61},{"cell_type":"code","source":"pd.set_option(\"display.max_row\",None)\nbest_selling","metadata":{"execution":{"iopub.status.busy":"2024-08-24T09:37:45.7118Z","iopub.execute_input":"2024-08-24T09:37:45.712309Z","iopub.status.idle":"2024-08-24T09:37:45.744751Z","shell.execute_reply.started":"2024-08-24T09:37:45.712275Z","shell.execute_reply":"2024-08-24T09:37:45.743425Z"},"trusted":true},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"                                                         aisle_count\ndepartment      dep_count aisle                                     \nproduce         9888378   packaged vegetables fruits         1843806\n                          packaged produce                    289488\n                          fresh vegetables                   3568630\n                          fresh herbs                         393793\n                          fresh fruits                       3792661\ndairy eggs      5631067   yogurt                             1507583\n                          specialty cheeses                    86364\n                          soy lactosefree                     664493\n                          refrigerated pudding desserts        39420\n                          packaged cheese                    1021462\n                          other creams cheeses                320827\n                          milk                                923659\n                          eggs                                472009\n                          cream                               330358\n                          butter                              264892\nsnacks          3006412   trail mix snack mix                  37053\n                          popcorn jerky                       170441\n                          nuts seeds dried fruit              319019\n                          mint gum                             23626\n                          ice cream toppings                   11706\n                          fruit vegetable snacks              182498\n                          energy granola bars                 473835\n                          crackers                            478430\n                          cookies cakes                       244045\n                          chips pretzels                      753739\n                          candy chocolate                     312020\nbeverages       2804175   water seltzer sparkling water       878150\n                          tea                                 258717\n                          soft drinks                         373816\n                          refrigerated                        599109\n                          juice nectars                       348283\n                          energy sports drinks                108357\n                          coffee                              215467\n                          cocoa drink mixes                    22276\nfrozen          2336858   ice cream ice                       521101\n                          frozen vegan vegetarian             104096\n                          frozen produce                      545107\n                          frozen pizza                        169879\n                          frozen meat seafood                  75083\n                          frozen meals                        408520\n                          frozen juice                          5147\n                          frozen dessert                       20241\n                          frozen breakfast                    242492\n                          frozen breads doughs                 41740\n                          frozen appetizers sides             203452\npantry          1956819   spreads                             301502\n                          spices seasonings                   221371\n                          salad dressing toppings             104050\n                          preserved dips spreads              113879\n                          pickled goods olives                117521\n                          oils vinegars                       256086\n                          marinades meat preparation           65415\n                          honeys syrups nectars                69790\n                          doughs gelatins bake mixes          110847\n                          condiments                          231792\n                          baking supplies decor                24786\n                          baking ingredients                  339780\nbakery          1225181   tortillas flat bread                201650\n                          buns rolls                          118069\n                          breakfast bakery                    260621\n                          bread                               608469\n                          bakery desserts                      36372\ncanned goods    1114857   soup broth bouillon                 361573\n                          canned meat seafood                  70287\n                          canned meals beans                  282088\n                          canned jarred vegetables            309716\n                          canned fruit applesauce              91193\ndeli            1095540   tofu meat alternatives              134597\n                          prepared soups salads                74864\n                          prepared meals                      103165\n                          lunch meat                          412087\n                          fresh dips tapenades                370827\ndry goods pasta 905340    pasta sauce                         228123\n                          instant foods                       210604\n                          grains rice dried goods             150323\n                          fresh pasta                          38355\n                          dry pasta                           277935\nhousehold       774652    trash bags liners                    33702\n                          plates bowls cups flatware           45307\n                          paper goods                         255690\n                          more household                       18405\n                          laundry                              98990\n                          kitchen supplies                      9620\n                          food storage                         68852\n                          dish detergents                      98797\n                          cleaning products                   124371\n                          air fresheners candles               20918\nmeat seafood    739238    seafood counter                      30726\n                          poultry counter                     134722\n                          packaged seafood                     21840\n                          packaged poultry                    124045\n                          packaged meat                        35391\n                          meat counter                         74046\n                          hot dogs bacon sausage              318468\nbreakfast       739069    hot cereal pancake mixes            164516\n                          granola                             105762\n                          cereal                              393787\n                          breakfast bars pastries              75004\npersonal care   468693    vitamins supplements                 47028\n                          soap                                 66832\n                          skin care                            10698\n                          shave needs                          10876\n                          protein meal replacements            38211\n                          oral hygiene                         66819\n                          muscles joints pain relief           19580\n                          hair care                            33482\n                          first aid                            11411\n                          feminine care                        20801\n                          facial care                          12915\n                          eye ear care                          9522\n                          digestion                            28078\n                          deodorants                           15673\n                          cold flu allergy                     27407\n                          body lotions soap                    42905\n                          beauty                                6455\nbabies          438743    diapers wipes                        25714\n                          baby food formula                   395654\n                          baby bath body care                   8909\n                          baby accessories                      8466\ninternational   281155    latino foods                         78495\n                          kosher foods                         12426\n                          indian foods                         16620\n                          asian foods                         173614\nalcohol         159294    white wines                          31646\n                          spirits                              29069\n                          specialty wines champagnes           11659\n                          red wines                            36424\n                          beers coolers                        50496\npets            102221    dog food care                        35915\n                          cat food care                        66306\nmissing         77396     missing                              77396\nother           38086     other                                38086\nbulk            35932     bulk grains rice dried goods         17839\n                          bulk dried fruits vegetables         18093","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>aisle_count</th>\n    </tr>\n    <tr>\n      <th>department</th>\n      <th>dep_count</th>\n      <th>aisle</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">produce</th>\n      <th rowspan=\"5\" valign=\"top\">9888378</th>\n      <th>packaged vegetables fruits</th>\n      <td>1843806</td>\n    </tr>\n    <tr>\n      <th>packaged produce</th>\n      <td>289488</td>\n    </tr>\n    <tr>\n      <th>fresh vegetables</th>\n      <td>3568630</td>\n    </tr>\n    <tr>\n      <th>fresh herbs</th>\n      <td>393793</td>\n    </tr>\n    <tr>\n      <th>fresh fruits</th>\n      <td>3792661</td>\n    </tr>\n    <tr>\n      <th rowspan=\"10\" valign=\"top\">dairy eggs</th>\n      <th rowspan=\"10\" valign=\"top\">5631067</th>\n      <th>yogurt</th>\n      <td>1507583</td>\n    </tr>\n    <tr>\n      <th>specialty cheeses</th>\n      <td>86364</td>\n    </tr>\n    <tr>\n      <th>soy lactosefree</th>\n      <td>664493</td>\n    </tr>\n    <tr>\n      <th>refrigerated pudding desserts</th>\n      <td>39420</td>\n    </tr>\n    <tr>\n      <th>packaged cheese</th>\n      <td>1021462</td>\n    </tr>\n    <tr>\n      <th>other creams cheeses</th>\n      <td>320827</td>\n    </tr>\n    <tr>\n      <th>milk</th>\n      <td>923659</td>\n    </tr>\n    <tr>\n      <th>eggs</th>\n      <td>472009</td>\n    </tr>\n    <tr>\n      <th>cream</th>\n      <td>330358</td>\n    </tr>\n    <tr>\n      <th>butter</th>\n      <td>264892</td>\n    </tr>\n    <tr>\n      <th rowspan=\"11\" valign=\"top\">snacks</th>\n      <th rowspan=\"11\" valign=\"top\">3006412</th>\n      <th>trail mix snack mix</th>\n      <td>37053</td>\n    </tr>\n    <tr>\n      <th>popcorn jerky</th>\n      <td>170441</td>\n    </tr>\n    <tr>\n      <th>nuts seeds dried fruit</th>\n      <td>319019</td>\n    </tr>\n    <tr>\n      <th>mint gum</th>\n      <td>23626</td>\n    </tr>\n    <tr>\n      <th>ice cream toppings</th>\n      <td>11706</td>\n    </tr>\n    <tr>\n      <th>fruit vegetable snacks</th>\n      <td>182498</td>\n    </tr>\n    <tr>\n      <th>energy granola bars</th>\n      <td>473835</td>\n    </tr>\n    <tr>\n      <th>crackers</th>\n      <td>478430</td>\n    </tr>\n    <tr>\n      <th>cookies cakes</th>\n      <td>244045</td>\n    </tr>\n    <tr>\n      <th>chips pretzels</th>\n      <td>753739</td>\n    </tr>\n    <tr>\n      <th>candy chocolate</th>\n      <td>312020</td>\n    </tr>\n    <tr>\n      <th rowspan=\"8\" valign=\"top\">beverages</th>\n      <th rowspan=\"8\" valign=\"top\">2804175</th>\n      <th>water seltzer sparkling water</th>\n      <td>878150</td>\n    </tr>\n    <tr>\n      <th>tea</th>\n      <td>258717</td>\n    </tr>\n    <tr>\n      <th>soft drinks</th>\n      <td>373816</td>\n    </tr>\n    <tr>\n      <th>refrigerated</th>\n      <td>599109</td>\n    </tr>\n    <tr>\n      <th>juice nectars</th>\n      <td>348283</td>\n    </tr>\n    <tr>\n      <th>energy sports drinks</th>\n      <td>108357</td>\n    </tr>\n    <tr>\n      <th>coffee</th>\n      <td>215467</td>\n    </tr>\n    <tr>\n      <th>cocoa drink mixes</th>\n      <td>22276</td>\n    </tr>\n    <tr>\n      <th rowspan=\"11\" valign=\"top\">frozen</th>\n      <th rowspan=\"11\" valign=\"top\">2336858</th>\n      <th>ice cream ice</th>\n      <td>521101</td>\n    </tr>\n    <tr>\n      <th>frozen vegan vegetarian</th>\n      <td>104096</td>\n    </tr>\n    <tr>\n      <th>frozen produce</th>\n      <td>545107</td>\n    </tr>\n    <tr>\n      <th>frozen pizza</th>\n      <td>169879</td>\n    </tr>\n    <tr>\n      <th>frozen meat seafood</th>\n      <td>75083</td>\n    </tr>\n    <tr>\n      <th>frozen meals</th>\n      <td>408520</td>\n    </tr>\n    <tr>\n      <th>frozen juice</th>\n      <td>5147</td>\n    </tr>\n    <tr>\n      <th>frozen dessert</th>\n      <td>20241</td>\n    </tr>\n    <tr>\n      <th>frozen breakfast</th>\n      <td>242492</td>\n    </tr>\n    <tr>\n      <th>frozen breads doughs</th>\n      <td>41740</td>\n    </tr>\n    <tr>\n      <th>frozen appetizers sides</th>\n      <td>203452</td>\n    </tr>\n    <tr>\n      <th rowspan=\"12\" valign=\"top\">pantry</th>\n      <th rowspan=\"12\" valign=\"top\">1956819</th>\n      <th>spreads</th>\n      <td>301502</td>\n    </tr>\n    <tr>\n      <th>spices seasonings</th>\n      <td>221371</td>\n    </tr>\n    <tr>\n      <th>salad dressing toppings</th>\n      <td>104050</td>\n    </tr>\n    <tr>\n      <th>preserved dips spreads</th>\n      <td>113879</td>\n    </tr>\n    <tr>\n      <th>pickled goods olives</th>\n      <td>117521</td>\n    </tr>\n    <tr>\n      <th>oils vinegars</th>\n      <td>256086</td>\n    </tr>\n    <tr>\n      <th>marinades meat preparation</th>\n      <td>65415</td>\n    </tr>\n    <tr>\n      <th>honeys syrups nectars</th>\n      <td>69790</td>\n    </tr>\n    <tr>\n      <th>doughs gelatins bake mixes</th>\n      <td>110847</td>\n    </tr>\n    <tr>\n      <th>condiments</th>\n      <td>231792</td>\n    </tr>\n    <tr>\n      <th>baking supplies decor</th>\n      <td>24786</td>\n    </tr>\n    <tr>\n      <th>baking ingredients</th>\n      <td>339780</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">bakery</th>\n      <th rowspan=\"5\" valign=\"top\">1225181</th>\n      <th>tortillas flat bread</th>\n      <td>201650</td>\n    </tr>\n    <tr>\n      <th>buns rolls</th>\n      <td>118069</td>\n    </tr>\n    <tr>\n      <th>breakfast bakery</th>\n      <td>260621</td>\n    </tr>\n    <tr>\n      <th>bread</th>\n      <td>608469</td>\n    </tr>\n    <tr>\n      <th>bakery desserts</th>\n      <td>36372</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">canned goods</th>\n      <th rowspan=\"5\" valign=\"top\">1114857</th>\n      <th>soup broth bouillon</th>\n      <td>361573</td>\n    </tr>\n    <tr>\n      <th>canned meat seafood</th>\n      <td>70287</td>\n    </tr>\n    <tr>\n      <th>canned meals beans</th>\n      <td>282088</td>\n    </tr>\n    <tr>\n      <th>canned jarred vegetables</th>\n      <td>309716</td>\n    </tr>\n    <tr>\n      <th>canned fruit applesauce</th>\n      <td>91193</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">deli</th>\n      <th rowspan=\"5\" valign=\"top\">1095540</th>\n      <th>tofu meat alternatives</th>\n      <td>134597</td>\n    </tr>\n    <tr>\n      <th>prepared soups salads</th>\n      <td>74864</td>\n    </tr>\n    <tr>\n      <th>prepared meals</th>\n      <td>103165</td>\n    </tr>\n    <tr>\n      <th>lunch meat</th>\n      <td>412087</td>\n    </tr>\n    <tr>\n      <th>fresh dips tapenades</th>\n      <td>370827</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">dry goods pasta</th>\n      <th rowspan=\"5\" valign=\"top\">905340</th>\n      <th>pasta sauce</th>\n      <td>228123</td>\n    </tr>\n    <tr>\n      <th>instant foods</th>\n      <td>210604</td>\n    </tr>\n    <tr>\n      <th>grains rice dried goods</th>\n      <td>150323</td>\n    </tr>\n    <tr>\n      <th>fresh pasta</th>\n      <td>38355</td>\n    </tr>\n    <tr>\n      <th>dry pasta</th>\n      <td>277935</td>\n    </tr>\n    <tr>\n      <th rowspan=\"10\" valign=\"top\">household</th>\n      <th rowspan=\"10\" valign=\"top\">774652</th>\n      <th>trash bags liners</th>\n      <td>33702</td>\n    </tr>\n    <tr>\n      <th>plates bowls cups flatware</th>\n      <td>45307</td>\n    </tr>\n    <tr>\n      <th>paper goods</th>\n      <td>255690</td>\n    </tr>\n    <tr>\n      <th>more household</th>\n      <td>18405</td>\n    </tr>\n    <tr>\n      <th>laundry</th>\n      <td>98990</td>\n    </tr>\n    <tr>\n      <th>kitchen supplies</th>\n      <td>9620</td>\n    </tr>\n    <tr>\n      <th>food storage</th>\n      <td>68852</td>\n    </tr>\n    <tr>\n      <th>dish detergents</th>\n      <td>98797</td>\n    </tr>\n    <tr>\n      <th>cleaning products</th>\n      <td>124371</td>\n    </tr>\n    <tr>\n      <th>air fresheners candles</th>\n      <td>20918</td>\n    </tr>\n    <tr>\n      <th rowspan=\"7\" valign=\"top\">meat seafood</th>\n      <th rowspan=\"7\" valign=\"top\">739238</th>\n      <th>seafood counter</th>\n      <td>30726</td>\n    </tr>\n    <tr>\n      <th>poultry counter</th>\n      <td>134722</td>\n    </tr>\n    <tr>\n      <th>packaged seafood</th>\n      <td>21840</td>\n    </tr>\n    <tr>\n      <th>packaged poultry</th>\n      <td>124045</td>\n    </tr>\n    <tr>\n      <th>packaged meat</th>\n      <td>35391</td>\n    </tr>\n    <tr>\n      <th>meat counter</th>\n      <td>74046</td>\n    </tr>\n    <tr>\n      <th>hot dogs bacon sausage</th>\n      <td>318468</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">breakfast</th>\n      <th rowspan=\"4\" valign=\"top\">739069</th>\n      <th>hot cereal pancake mixes</th>\n      <td>164516</td>\n    </tr>\n    <tr>\n      <th>granola</th>\n      <td>105762</td>\n    </tr>\n    <tr>\n      <th>cereal</th>\n      <td>393787</td>\n    </tr>\n    <tr>\n      <th>breakfast bars pastries</th>\n      <td>75004</td>\n    </tr>\n    <tr>\n      <th rowspan=\"17\" valign=\"top\">personal care</th>\n      <th rowspan=\"17\" valign=\"top\">468693</th>\n      <th>vitamins supplements</th>\n      <td>47028</td>\n    </tr>\n    <tr>\n      <th>soap</th>\n      <td>66832</td>\n    </tr>\n    <tr>\n      <th>skin care</th>\n      <td>10698</td>\n    </tr>\n    <tr>\n      <th>shave needs</th>\n      <td>10876</td>\n    </tr>\n    <tr>\n      <th>protein meal replacements</th>\n      <td>38211</td>\n    </tr>\n    <tr>\n      <th>oral hygiene</th>\n      <td>66819</td>\n    </tr>\n    <tr>\n      <th>muscles joints pain relief</th>\n      <td>19580</td>\n    </tr>\n    <tr>\n      <th>hair care</th>\n      <td>33482</td>\n    </tr>\n    <tr>\n      <th>first aid</th>\n      <td>11411</td>\n    </tr>\n    <tr>\n      <th>feminine care</th>\n      <td>20801</td>\n    </tr>\n    <tr>\n      <th>facial care</th>\n      <td>12915</td>\n    </tr>\n    <tr>\n      <th>eye ear care</th>\n      <td>9522</td>\n    </tr>\n    <tr>\n      <th>digestion</th>\n      <td>28078</td>\n    </tr>\n    <tr>\n      <th>deodorants</th>\n      <td>15673</td>\n    </tr>\n    <tr>\n      <th>cold flu allergy</th>\n      <td>27407</td>\n    </tr>\n    <tr>\n      <th>body lotions soap</th>\n      <td>42905</td>\n    </tr>\n    <tr>\n      <th>beauty</th>\n      <td>6455</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">babies</th>\n      <th rowspan=\"4\" valign=\"top\">438743</th>\n      <th>diapers wipes</th>\n      <td>25714</td>\n    </tr>\n    <tr>\n      <th>baby food formula</th>\n      <td>395654</td>\n    </tr>\n    <tr>\n      <th>baby bath body care</th>\n      <td>8909</td>\n    </tr>\n    <tr>\n      <th>baby accessories</th>\n      <td>8466</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">international</th>\n      <th rowspan=\"4\" valign=\"top\">281155</th>\n      <th>latino foods</th>\n      <td>78495</td>\n    </tr>\n    <tr>\n      <th>kosher foods</th>\n      <td>12426</td>\n    </tr>\n    <tr>\n      <th>indian foods</th>\n      <td>16620</td>\n    </tr>\n    <tr>\n      <th>asian foods</th>\n      <td>173614</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">alcohol</th>\n      <th rowspan=\"5\" valign=\"top\">159294</th>\n      <th>white wines</th>\n      <td>31646</td>\n    </tr>\n    <tr>\n      <th>spirits</th>\n      <td>29069</td>\n    </tr>\n    <tr>\n      <th>specialty wines champagnes</th>\n      <td>11659</td>\n    </tr>\n    <tr>\n      <th>red wines</th>\n      <td>36424</td>\n    </tr>\n    <tr>\n      <th>beers coolers</th>\n      <td>50496</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">pets</th>\n      <th rowspan=\"2\" valign=\"top\">102221</th>\n      <th>dog food care</th>\n      <td>35915</td>\n    </tr>\n    <tr>\n      <th>cat food care</th>\n      <td>66306</td>\n    </tr>\n    <tr>\n      <th>missing</th>\n      <th>77396</th>\n      <th>missing</th>\n      <td>77396</td>\n    </tr>\n    <tr>\n      <th>other</th>\n      <th>38086</th>\n      <th>other</th>\n      <td>38086</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">bulk</th>\n      <th rowspan=\"2\" valign=\"top\">35932</th>\n      <th>bulk grains rice dried goods</th>\n      <td>17839</td>\n    </tr>\n    <tr>\n      <th>bulk dried fruits vegetables</th>\n      <td>18093</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}